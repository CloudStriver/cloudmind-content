// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package provider

import (
	"github.com/CloudStriver/cloudmind-content/biz/adaptor"
	"github.com/CloudStriver/cloudmind-content/biz/application/service"
	"github.com/CloudStriver/cloudmind-content/biz/infrastructure/config"
	"github.com/CloudStriver/cloudmind-content/biz/infrastructure/gorse"
	"github.com/CloudStriver/cloudmind-content/biz/infrastructure/kq"
	"github.com/CloudStriver/cloudmind-content/biz/infrastructure/mapper/coupon"
	"github.com/CloudStriver/cloudmind-content/biz/infrastructure/mapper/file"
	"github.com/CloudStriver/cloudmind-content/biz/infrastructure/mapper/hot"
	"github.com/CloudStriver/cloudmind-content/biz/infrastructure/mapper/order"
	"github.com/CloudStriver/cloudmind-content/biz/infrastructure/mapper/post"
	"github.com/CloudStriver/cloudmind-content/biz/infrastructure/mapper/product"
	"github.com/CloudStriver/cloudmind-content/biz/infrastructure/mapper/publicfile"
	"github.com/CloudStriver/cloudmind-content/biz/infrastructure/mapper/sharefile"
	"github.com/CloudStriver/cloudmind-content/biz/infrastructure/mapper/user"
	"github.com/CloudStriver/cloudmind-content/biz/infrastructure/stores/cache"
	"github.com/CloudStriver/cloudmind-content/biz/infrastructure/stores/redis"
)

// Injectors from wire.go:

func NewContentServerImpl() (*adaptor.ContentServerImpl, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	iMongoMapper := file.NewMongoMapper(configConfig)
	publicfileIMongoMapper := publicfile.NewMongoMapper(configConfig)
	iFileEsMapper := publicfile.NewEsMapper(configConfig)
	fileIFileEsMapper := file.NewEsMapper(configConfig)
	sharefileIMongoMapper := sharefile.NewMongoMapper(configConfig)
	deleteFileRelationKq := kq.NewDeleteFileRelationKq(configConfig)
	fileService := &service.FileService{
		Config:                configConfig,
		FileMongoMapper:       iMongoMapper,
		PublicFileMongoMapper: publicfileIMongoMapper,
		PublicFileEsMapper:    iFileEsMapper,
		FileEsMapper:          fileIFileEsMapper,
		ShareFileMongoMapper:  sharefileIMongoMapper,
		DeleteFileRelationKq:  deleteFileRelationKq,
	}
	iPostMongoMapper := post.NewMongoMapper(configConfig)
	iEsMapper := post.NewEsMapper(configConfig)
	redisRedis := redis.NewRedis(configConfig)
	postService := &service.PostService{
		Config:          configConfig,
		PostMongoMapper: iPostMongoMapper,
		PostEsMapper:    iEsMapper,
		Redis:           redisRedis,
	}
	iUserMongoMapper := user.NewMongoMapper(configConfig)
	iUserEsMapper := user.NewEsMapper(configConfig)
	userService := &service.UserService{
		Config:          configConfig,
		UserMongoMapper: iUserMongoMapper,
		UserEsMapper:    iUserEsMapper,
		Redis:           redisRedis,
	}
	iProductMongoMapper := product.NewMongoMapper(configConfig)
	productIEsMapper := product.NewEsMapper(configConfig)
	productService := &service.ProductService{
		Config:             configConfig,
		ProductMongoMapper: iProductMongoMapper,
		ProductEsMapper:    productIEsMapper,
		Redis:              redisRedis,
	}
	iCouponMongoMapper := coupon.NewMongoMapper(configConfig)
	couponIEsMapper := coupon.NewEsMapper(configConfig)
	couponService := &service.CouponService{
		Config:            configConfig,
		CouponMongoMapper: iCouponMongoMapper,
		CouponEsMapper:    couponIEsMapper,
		Redis:             redisRedis,
	}
	iOrderMongoMapper := order.NewMongoMapper(configConfig)
	orderIEsMapper := order.NewEsMapper(configConfig)
	orderService := &service.OrderService{
		Config:           configConfig,
		OrderMongoMapper: iOrderMongoMapper,
		OrderEsMapper:    orderIEsMapper,
		Redis:            redisRedis,
	}
	gorseClient := gorse.NewGorseClient(configConfig)
	recommendService := &service.RecommendService{
		Redis: redisRedis,
		Gorse: gorseClient,
	}
	iHotMongoMapper := hot.NewMongoMapper(configConfig)
	collectionCache := cache.NewLocalCache(configConfig)
	hotService := &service.HotService{
		Config:         configConfig,
		HotMongoMapper: iHotMongoMapper,
		Redis:          redisRedis,
		Cache:          collectionCache,
	}
	contentServerImpl := &adaptor.ContentServerImpl{
		Config:           configConfig,
		FileService:      fileService,
		PostService:      postService,
		UserService:      userService,
		ProductService:   productService,
		CouponService:    couponService,
		OrderService:     orderService,
		RecommendService: recommendService,
		HotService:       hotService,
	}
	return contentServerImpl, nil
}
